"use strict";(self["webpackChunkthree_project"]=self["webpackChunkthree_project"]||[]).push([[909],{2909:function(t,e,n){n.r(e),n.d(e,{default:function(){return b}});var o=function(){var t=this,e=t._self._c;return e("div",{ref:"webglRef",staticClass:"container",attrs:{id:"container"}})},i=[],a=n(68964),r=n(39777),l=n(74788),s=n(17024);class c extends a.eaF{constructor(t,e={}){super(t);const n=this,o=void 0!==e.textureWidth?e.textureWidth:512,i=void 0!==e.textureHeight?e.textureHeight:512,r=void 0!==e.clipBias?e.clipBias:0,l=void 0!==e.alpha?e.alpha:1,s=void 0!==e.time?e.time:0,c=void 0!==e.waterNormals?e.waterNormals:null,u=void 0!==e.sunDirection?e.sunDirection:new a.Pq0(.70707,.70707,0),d=new a.Q1f(void 0!==e.sunColor?e.sunColor:16777215),f=new a.Q1f(void 0!==e.waterColor?e.waterColor:8355711),m=void 0!==e.eye?e.eye:new a.Pq0(0,0,0),v=void 0!==e.distortionScale?e.distortionScale:20,p=void 0!==e.side?e.side:a.hB5,h=void 0!==e.fog&&e.fog,g=new a.Zcv,w=new a.Pq0,x=new a.Pq0,y=new a.Pq0,S=new a.kn4,P=new a.Pq0(0,0,-1),C=new a.IUQ,b=new a.Pq0,M=new a.Pq0,R=new a.IUQ,E=new a.kn4,_=new a.ubm,z={minFilter:a.k6q,magFilter:a.k6q,format:a.HIg},D=new a.nWS(o,i,z);a.cj9.isPowerOfTwo(o)&&a.cj9.isPowerOfTwo(i)||(D.texture.generateMipmaps=!1);const T={uniforms:a.LlO.merge([a.fCn["fog"],a.fCn["lights"],{normalSampler:{value:null},mirrorSampler:{value:null},alpha:{value:1},time:{value:0},size:{value:1},distortionScale:{value:20},textureMatrix:{value:new a.kn4},sunColor:{value:new a.Q1f(8355711)},sunDirection:{value:new a.Pq0(.70707,.70707,0)},eye:{value:new a.Pq0},waterColor:{value:new a.Q1f(5592405)}}]),vertexShader:"\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tuniform float time;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tworldPosition = mirrorCoord.xyzw;\n\t\t\t\t\tmirrorCoord = textureMatrix * mirrorCoord;\n\t\t\t\t\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t#include <beginnormal_vertex>\n\t\t\t\t#include <defaultnormal_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <fog_vertex>\n\t\t\t\t#include <shadowmap_vertex>\n\t\t\t}",fragmentShader:"\n\t\t\t\tuniform sampler2D mirrorSampler;\n\t\t\t\tuniform float alpha;\n\t\t\t\tuniform float time;\n\t\t\t\tuniform float size;\n\t\t\t\tuniform float distortionScale;\n\t\t\t\tuniform sampler2D normalSampler;\n\t\t\t\tuniform vec3 sunColor;\n\t\t\t\tuniform vec3 sunDirection;\n\t\t\t\tuniform vec3 eye;\n\t\t\t\tuniform vec3 waterColor;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\tvec4 getNoise( vec2 uv ) {\n\t\t\t\t\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\n\t\t\t\t\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\n\t\t\t\t\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\n\t\t\t\t\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\n\t\t\t\t\tvec4 noise = texture2D( normalSampler, uv0 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv1 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv2 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv3 );\n\t\t\t\t\treturn noise * 0.5 - 1.0;\n\t\t\t\t}\n\n\t\t\t\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\n\t\t\t\t\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\n\t\t\t\t\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\n\t\t\t\t\tspecularColor += pow( direction, shiny ) * sunColor * spec;\n\t\t\t\t\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\n\t\t\t\t}\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <packing>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <shadowmask_pars_fragment>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t\tvec4 noise = getNoise( worldPosition.xz * size );\n\t\t\t\t\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\n\n\t\t\t\t\tvec3 diffuseLight = vec3(0.0);\n\t\t\t\t\tvec3 specularLight = vec3(0.0);\n\n\t\t\t\t\tvec3 worldToEye = eye-worldPosition.xyz;\n\t\t\t\t\tvec3 eyeDirection = normalize( worldToEye );\n\t\t\t\t\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\n\n\t\t\t\t\tfloat distance = length(worldToEye);\n\n\t\t\t\t\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\n\t\t\t\t\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\n\n\t\t\t\t\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\n\t\t\t\t\tfloat rf0 = 0.3;\n\t\t\t\t\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\n\t\t\t\t\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\n\t\t\t\t\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\n\t\t\t\t\tvec3 outgoingLight = albedo;\n\t\t\t\t\tgl_FragColor = vec4( outgoingLight, alpha );\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <fog_fragment>\n\t\t\t\t}"},L=new a.BKk({fragmentShader:T.fragmentShader,vertexShader:T.vertexShader,uniforms:a.LlO.clone(T.uniforms),lights:!0,side:p,fog:h});L.uniforms["mirrorSampler"].value=D.texture,L.uniforms["textureMatrix"].value=E,L.uniforms["alpha"].value=l,L.uniforms["time"].value=s,L.uniforms["normalSampler"].value=c,L.uniforms["sunColor"].value=d,L.uniforms["waterColor"].value=f,L.uniforms["sunDirection"].value=u,L.uniforms["distortionScale"].value=v,L.uniforms["eye"].value=m,n.material=L,n.onBeforeRender=function(t,e,o){if(x.setFromMatrixPosition(n.matrixWorld),y.setFromMatrixPosition(o.matrixWorld),S.extractRotation(n.matrixWorld),w.set(0,0,1),w.applyMatrix4(S),b.subVectors(x,y),b.dot(w)>0)return;b.reflect(w).negate(),b.add(x),S.extractRotation(o.matrixWorld),P.set(0,0,-1),P.applyMatrix4(S),P.add(y),M.subVectors(x,P),M.reflect(w).negate(),M.add(x),_.position.copy(b),_.up.set(0,1,0),_.up.applyMatrix4(S),_.up.reflect(w),_.lookAt(M),_.far=o.far,_.updateMatrixWorld(),_.projectionMatrix.copy(o.projectionMatrix),E.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),E.multiply(_.projectionMatrix),E.multiply(_.matrixWorldInverse),g.setFromNormalAndCoplanarPoint(w,x),g.applyMatrix4(_.matrixWorldInverse),C.set(g.normal.x,g.normal.y,g.normal.z,g.constant);const i=_.projectionMatrix;R.x=(Math.sign(C.x)+i.elements[8])/i.elements[0],R.y=(Math.sign(C.y)+i.elements[9])/i.elements[5],R.z=-1,R.w=(1+i.elements[10])/i.elements[14],C.multiplyScalar(2/C.dot(R)),i.elements[2]=C.x,i.elements[6]=C.y,i.elements[10]=C.z+1-r,i.elements[14]=C.w,m.setFromMatrixPosition(o.matrixWorld);const a=t.getRenderTarget(),l=t.xr.enabled,s=t.shadowMap.autoUpdate;n.visible=!1,t.xr.enabled=!1,t.shadowMap.autoUpdate=!1,t.setRenderTarget(D),t.state.buffers.depth.setMask(!0),!1===t.autoClear&&t.clear(),t.render(e,_),n.visible=!0,t.xr.enabled=l,t.shadowMap.autoUpdate=s,t.setRenderTarget(a);const c=o.viewport;void 0!==c&&t.state.viewport(c)}}}c.prototype.isWater=!0;class u extends a.eaF{constructor(){const t=u.SkyShader,e=new a.BKk({name:"SkyShader",fragmentShader:t.fragmentShader,vertexShader:t.vertexShader,uniforms:a.LlO.clone(t.uniforms),side:a.hsX,depthWrite:!1});super(new a.iNn(1,1,1),e)}}let d,f,m,v,p,h,g,w,x;u.prototype.isSky=!0,u.SkyShader={uniforms:{turbidity:{value:2},rayleigh:{value:1},mieCoefficient:{value:.005},mieDirectionalG:{value:.8},sunPosition:{value:new a.Pq0},up:{value:new a.Pq0(0,1,0)}},vertexShader:"\n\t\tuniform vec3 sunPosition;\n\t\tuniform float rayleigh;\n\t\tuniform float turbidity;\n\t\tuniform float mieCoefficient;\n\t\tuniform vec3 up;\n\n\t\tvarying vec3 vWorldPosition;\n\t\tvarying vec3 vSunDirection;\n\t\tvarying float vSunfade;\n\t\tvarying vec3 vBetaR;\n\t\tvarying vec3 vBetaM;\n\t\tvarying float vSunE;\n\n\t\t// constants for atmospheric scattering\n\t\tconst float e = 2.71828182845904523536028747135266249775724709369995957;\n\t\tconst float pi = 3.141592653589793238462643383279502884197169;\n\n\t\t// wavelength of used primaries, according to preetham\n\t\tconst vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );\n\t\t// this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\n\t\t// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\n\t\tconst vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );\n\n\t\t// mie stuff\n\t\t// K coefficient for the primaries\n\t\tconst float v = 4.0;\n\t\tconst vec3 K = vec3( 0.686, 0.678, 0.666 );\n\t\t// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\n\t\tconst vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );\n\n\t\t// earth shadow hack\n\t\t// cutoffAngle = pi / 1.95;\n\t\tconst float cutoffAngle = 1.6110731556870734;\n\t\tconst float steepness = 1.5;\n\t\tconst float EE = 1000.0;\n\n\t\tfloat sunIntensity( float zenithAngleCos ) {\n\t\t\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );\n\t\t\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );\n\t\t}\n\n\t\tvec3 totalMie( float T ) {\n\t\t\tfloat c = ( 0.2 * T ) * 10E-18;\n\t\t\treturn 0.434 * c * MieConst;\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\t\tvWorldPosition = worldPosition.xyz;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\tgl_Position.z = gl_Position.w; // set z to camera.far\n\n\t\t\tvSunDirection = normalize( sunPosition );\n\n\t\t\tvSunE = sunIntensity( dot( vSunDirection, up ) );\n\n\t\t\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );\n\n\t\t\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );\n\n\t\t\t// extinction (absorbtion + out scattering)\n\t\t\t// rayleigh coefficients\n\t\t\tvBetaR = totalRayleigh * rayleighCoefficient;\n\n\t\t\t// mie coefficients\n\t\t\tvBetaM = totalMie( turbidity ) * mieCoefficient;\n\n\t\t}",fragmentShader:"\n\t\tvarying vec3 vWorldPosition;\n\t\tvarying vec3 vSunDirection;\n\t\tvarying float vSunfade;\n\t\tvarying vec3 vBetaR;\n\t\tvarying vec3 vBetaM;\n\t\tvarying float vSunE;\n\n\t\tuniform float mieDirectionalG;\n\t\tuniform vec3 up;\n\n\t\tconst vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );\n\n\t\t// constants for atmospheric scattering\n\t\tconst float pi = 3.141592653589793238462643383279502884197169;\n\n\t\tconst float n = 1.0003; // refractive index of air\n\t\tconst float N = 2.545E25; // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)\n\n\t\t// optical length at zenith for molecules\n\t\tconst float rayleighZenithLength = 8.4E3;\n\t\tconst float mieZenithLength = 1.25E3;\n\t\t// 66 arc seconds -> degrees, and the cosine of that\n\t\tconst float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\n\n\t\t// 3.0 / ( 16.0 * pi )\n\t\tconst float THREE_OVER_SIXTEENPI = 0.05968310365946075;\n\t\t// 1.0 / ( 4.0 * pi )\n\t\tconst float ONE_OVER_FOURPI = 0.07957747154594767;\n\n\t\tfloat rayleighPhase( float cosTheta ) {\n\t\t\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );\n\t\t}\n\n\t\tfloat hgPhase( float cosTheta, float g ) {\n\t\t\tfloat g2 = pow( g, 2.0 );\n\t\t\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );\n\t\t\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec3 direction = normalize( vWorldPosition - cameraPos );\n\n\t\t\t// optical length\n\t\t\t// cutoff angle at 90 to avoid singularity in next formula.\n\t\t\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );\n\t\t\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );\n\t\t\tfloat sR = rayleighZenithLength * inverse;\n\t\t\tfloat sM = mieZenithLength * inverse;\n\n\t\t\t// combined extinction factor\n\t\t\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );\n\n\t\t\t// in scattering\n\t\t\tfloat cosTheta = dot( direction, vSunDirection );\n\n\t\t\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );\n\t\t\tvec3 betaRTheta = vBetaR * rPhase;\n\n\t\t\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );\n\t\t\tvec3 betaMTheta = vBetaM * mPhase;\n\n\t\t\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );\n\t\t\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );\n\n\t\t\t// nightsky\n\t\t\tfloat theta = acos( direction.y ); // elevation --\x3e y-axis, [-pi/2, pi/2]\n\t\t\tfloat phi = atan( direction.z, direction.x ); // azimuth --\x3e x-axis [-pi/2, pi/2]\n\t\t\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );\n\t\t\tvec3 L0 = vec3( 0.1 ) * Fex;\n\n\t\t\t// composition + solar disc\n\t\t\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );\n\t\t\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;\n\n\t\t\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );\n\n\t\t\tvec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );\n\n\t\t\tgl_FragColor = vec4( retColor, 1.0 );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\n\t\t}"};var y={components:{},data(){return{}},props:{},computed:{},watch:{},created(){},mounted(){this.$nextTick((()=>{this.init()}))},methods:{init(){p=new a.JeP,p.setPixelRatio(window.devicePixelRatio),p.setSize(this.$refs.webglRef.clientWidth,this.$refs.webglRef.clientHeight),p.setAnimationLoop(this.animate),p.toneMapping=a.FV,p.toneMappingExposure=1,this.$refs.webglRef.appendChild(p.domElement),v=new a.Z58,m=new a.ubm(55,this.$refs.webglRef.clientWidth/this.$refs.webglRef.clientHeight,1,2e4),m.position.set(30,30,100),w=new a.Pq0;const t=new a.bdM(1e4,1e4);g=new c(t,{textureWidth:512,textureHeight:512,waterNormals:(new a.Tap).load("/static/textures/waternormals.jpg",(function(t){t.wrapS=t.wrapT=a.GJx})),sunDirection:new a.Pq0,sunColor:16777215,waterColor:7695,distortionScale:3.7,fog:void 0!==v.fog}),g.rotation.x=-Math.PI/2,v.add(g);const e=new u;e.scale.setScalar(1e4),v.add(e);const n=e.material.uniforms;n.turbidity.value=10,n.rayleigh.value=2,n.mieCoefficient.value=.005,n.mieDirectionalG.value=.8;const o={elevation:2,azimuth:180},i=new a.BdL(p),y=new a.Z58;let S;function P(){const t=a.cj9.degToRad(90-o.elevation),n=a.cj9.degToRad(o.azimuth);w.setFromSphericalCoords(1,t,n),e.material.uniforms.sunPosition.value.copy(w),g.material.uniforms.sunDirection.value.copy(w).normalize(),void 0!==S&&S.dispose(),y.add(e),S=i.fromScene(y),v.add(e),v.environment=S.texture}P();const C=new a.iNn(30,30,30),b=new a._4j({roughness:0});x=new a.eaF(C,b),v.add(x),h=new s.N(m,p.domElement),h.maxPolarAngle=.495*Math.PI,h.target.set(0,10,0),h.minDistance=40,h.maxDistance=200,h.update(),d=new r.A,d.dom.style.position="absolute",d.dom.style.top="10px",d.dom.style.left="10px",this.$refs.webglRef.appendChild(d.dom),f=new l.cL;const M=f.addFolder("Sky");M.add(o,"elevation",0,90,.1).onChange(P),M.add(o,"azimuth",-180,180,.1).onChange(P),M.open();const R=g.material.uniforms,E=f.addFolder("Water");E.add(R.distortionScale,"value",0,100,.1).name("distortionScale").onChange(this.render),E.add(R.size,"value",.1,10,.1).name("size"),E.open(),window.addEventListener("resize",this.onWindowResize)},onWindowResize(){m.aspect=this.$refs.webglRef.clientWidth/this.$refs.webglRef.clientHeight,m.updateProjectionMatrix(),p.setSize(this.$refs.webglRef.clientWidth,this.$refs.webglRef.clientHeight)},animate(){this.render(),d.update()},render(){const t=.001*performance.now();x.position.y=20*Math.sin(t)+5,x.rotation.x=.5*t,x.rotation.z=.51*t,g.material.uniforms.time.value+=1/60,p.render(v,m)},destroyGUI(){f&&(f.destroy(),f=null)}},beforeDestroy(){this.destroyGUI()}},S=y,P=n(81656),C=(0,P.A)(S,o,i,!1,null,"9ca1d56e",null),b=C.exports},39777:function(t,e){var n=function(){var t=0,e=document.createElement("div");function o(t){return e.appendChild(t.dom),t}function i(n){for(var o=0;o<e.children.length;o++)e.children[o].style.display=o===n?"block":"none";t=n}e.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",e.addEventListener("click",(function(n){n.preventDefault(),i(++t%e.children.length)}),!1);var a=(performance||Date).now(),r=a,l=0,s=o(new n.Panel("FPS","#0ff","#002")),c=o(new n.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var u=o(new n.Panel("MB","#f08","#201"));return i(0),{REVISION:16,dom:e,addPanel:o,showPanel:i,begin:function(){a=(performance||Date).now()},end:function(){l++;var t=(performance||Date).now();if(c.update(t-a,200),t>=r+1e3&&(s.update(1e3*l/(t-r),100),r=t,l=0,u)){var e=performance.memory;u.update(e.usedJSHeapSize/1048576,e.jsHeapSizeLimit/1048576)}return t},update:function(){a=this.end()},domElement:e,setMode:i}};n.Panel=function(t,e,n){var o=1/0,i=0,a=Math.round,r=a(window.devicePixelRatio||1),l=80*r,s=48*r,c=3*r,u=2*r,d=3*r,f=15*r,m=74*r,v=30*r,p=document.createElement("canvas");p.width=l,p.height=s,p.style.cssText="width:80px;height:48px";var h=p.getContext("2d");return h.font="bold "+9*r+"px Helvetica,Arial,sans-serif",h.textBaseline="top",h.fillStyle=n,h.fillRect(0,0,l,s),h.fillStyle=e,h.fillText(t,c,u),h.fillRect(d,f,m,v),h.fillStyle=n,h.globalAlpha=.9,h.fillRect(d,f,m,v),{dom:p,update:function(s,g){o=Math.min(o,s),i=Math.max(i,s),h.fillStyle=n,h.globalAlpha=1,h.fillRect(0,0,l,f),h.fillStyle=e,h.fillText(a(s)+" "+t+" ("+a(o)+"-"+a(i)+")",c,u),h.drawImage(p,d+r,f,m-r,v,d,f,m-r,v),h.fillRect(d+m-r,f,r,v),h.fillStyle=n,h.globalAlpha=.9,h.fillRect(d+m-r,f,r,a((1-s/g)*v))}}},e.A=n}}]);
//# sourceMappingURL=909.fd5d0be0.js.map