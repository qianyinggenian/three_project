{"version":3,"file":"js/909.fd5d0be0.js","mappings":"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","sources":["webpack://three_project/./src/views/ocean/index.vue","webpack://three_project/./node_modules/three/examples/jsm/objects/Water.js","webpack://three_project/./node_modules/three/examples/jsm/objects/Sky.js","webpack://three_project/src/views/ocean/index.vue","webpack://three_project/./src/views/ocean/index.vue?847f","webpack://three_project/./src/views/ocean/index.vue?366b","webpack://three_project/./node_modules/three/examples/jsm/libs/stats.module.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{ref:\"webglRef\",staticClass:\"container\",attrs:{\"id\":\"container\"}})\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import {\n\tColor,\n\tFrontSide,\n\tLinearFilter,\n\tMathUtils,\n\tMatrix4,\n\tMesh,\n\tPerspectiveCamera,\n\tPlane,\n\tRGBFormat,\n\tShaderMaterial,\n\tUniformsLib,\n\tUniformsUtils,\n\tVector3,\n\tVector4,\n\tWebGLRenderTarget\n} from 'three';\n\n/**\n * Work based on :\n * http://slayvin.net : Flat mirror for three.js\n * http://www.adelphi.edu/~stemkoski : An implementation of water shader based on the flat mirror\n * http://29a.ch/ && http://29a.ch/slides/2012/webglwater/ : Water shader explanations in WebGL\n */\n\nclass Water extends Mesh {\n\n\tconstructor( geometry, options = {} ) {\n\n\t\tsuper( geometry );\n\n\t\tconst scope = this;\n\n\t\tconst textureWidth = options.textureWidth !== undefined ? options.textureWidth : 512;\n\t\tconst textureHeight = options.textureHeight !== undefined ? options.textureHeight : 512;\n\n\t\tconst clipBias = options.clipBias !== undefined ? options.clipBias : 0.0;\n\t\tconst alpha = options.alpha !== undefined ? options.alpha : 1.0;\n\t\tconst time = options.time !== undefined ? options.time : 0.0;\n\t\tconst normalSampler = options.waterNormals !== undefined ? options.waterNormals : null;\n\t\tconst sunDirection = options.sunDirection !== undefined ? options.sunDirection : new Vector3( 0.70707, 0.70707, 0.0 );\n\t\tconst sunColor = new Color( options.sunColor !== undefined ? options.sunColor : 0xffffff );\n\t\tconst waterColor = new Color( options.waterColor !== undefined ? options.waterColor : 0x7F7F7F );\n\t\tconst eye = options.eye !== undefined ? options.eye : new Vector3( 0, 0, 0 );\n\t\tconst distortionScale = options.distortionScale !== undefined ? options.distortionScale : 20.0;\n\t\tconst side = options.side !== undefined ? options.side : FrontSide;\n\t\tconst fog = options.fog !== undefined ? options.fog : false;\n\n\t\t//\n\n\t\tconst mirrorPlane = new Plane();\n\t\tconst normal = new Vector3();\n\t\tconst mirrorWorldPosition = new Vector3();\n\t\tconst cameraWorldPosition = new Vector3();\n\t\tconst rotationMatrix = new Matrix4();\n\t\tconst lookAtPosition = new Vector3( 0, 0, - 1 );\n\t\tconst clipPlane = new Vector4();\n\n\t\tconst view = new Vector3();\n\t\tconst target = new Vector3();\n\t\tconst q = new Vector4();\n\n\t\tconst textureMatrix = new Matrix4();\n\n\t\tconst mirrorCamera = new PerspectiveCamera();\n\n\t\tconst parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBFormat\n\t\t};\n\n\t\tconst renderTarget = new WebGLRenderTarget( textureWidth, textureHeight, parameters );\n\n\t\tif ( ! MathUtils.isPowerOfTwo( textureWidth ) || ! MathUtils.isPowerOfTwo( textureHeight ) ) {\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t}\n\n\t\tconst mirrorShader = {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib[ 'fog' ],\n\t\t\t\tUniformsLib[ 'lights' ],\n\t\t\t\t{\n\t\t\t\t\t'normalSampler': { value: null },\n\t\t\t\t\t'mirrorSampler': { value: null },\n\t\t\t\t\t'alpha': { value: 1.0 },\n\t\t\t\t\t'time': { value: 0.0 },\n\t\t\t\t\t'size': { value: 1.0 },\n\t\t\t\t\t'distortionScale': { value: 20.0 },\n\t\t\t\t\t'textureMatrix': { value: new Matrix4() },\n\t\t\t\t\t'sunColor': { value: new Color( 0x7F7F7F ) },\n\t\t\t\t\t'sunDirection': { value: new Vector3( 0.70707, 0.70707, 0 ) },\n\t\t\t\t\t'eye': { value: new Vector3() },\n\t\t\t\t\t'waterColor': { value: new Color( 0x555555 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: /* glsl */`\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tuniform float time;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tworldPosition = mirrorCoord.xyzw;\n\t\t\t\t\tmirrorCoord = textureMatrix * mirrorCoord;\n\t\t\t\t\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t#include <beginnormal_vertex>\n\t\t\t\t#include <defaultnormal_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <fog_vertex>\n\t\t\t\t#include <shadowmap_vertex>\n\t\t\t}`,\n\n\t\t\tfragmentShader: /* glsl */`\n\t\t\t\tuniform sampler2D mirrorSampler;\n\t\t\t\tuniform float alpha;\n\t\t\t\tuniform float time;\n\t\t\t\tuniform float size;\n\t\t\t\tuniform float distortionScale;\n\t\t\t\tuniform sampler2D normalSampler;\n\t\t\t\tuniform vec3 sunColor;\n\t\t\t\tuniform vec3 sunDirection;\n\t\t\t\tuniform vec3 eye;\n\t\t\t\tuniform vec3 waterColor;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\tvec4 getNoise( vec2 uv ) {\n\t\t\t\t\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\n\t\t\t\t\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\n\t\t\t\t\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\n\t\t\t\t\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\n\t\t\t\t\tvec4 noise = texture2D( normalSampler, uv0 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv1 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv2 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv3 );\n\t\t\t\t\treturn noise * 0.5 - 1.0;\n\t\t\t\t}\n\n\t\t\t\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\n\t\t\t\t\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\n\t\t\t\t\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\n\t\t\t\t\tspecularColor += pow( direction, shiny ) * sunColor * spec;\n\t\t\t\t\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\n\t\t\t\t}\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <packing>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <shadowmask_pars_fragment>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t\tvec4 noise = getNoise( worldPosition.xz * size );\n\t\t\t\t\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\n\n\t\t\t\t\tvec3 diffuseLight = vec3(0.0);\n\t\t\t\t\tvec3 specularLight = vec3(0.0);\n\n\t\t\t\t\tvec3 worldToEye = eye-worldPosition.xyz;\n\t\t\t\t\tvec3 eyeDirection = normalize( worldToEye );\n\t\t\t\t\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\n\n\t\t\t\t\tfloat distance = length(worldToEye);\n\n\t\t\t\t\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\n\t\t\t\t\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\n\n\t\t\t\t\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\n\t\t\t\t\tfloat rf0 = 0.3;\n\t\t\t\t\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\n\t\t\t\t\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\n\t\t\t\t\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\n\t\t\t\t\tvec3 outgoingLight = albedo;\n\t\t\t\t\tgl_FragColor = vec4( outgoingLight, alpha );\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <fog_fragment>\n\t\t\t\t}`\n\n\t\t};\n\n\t\tconst material = new ShaderMaterial( {\n\t\t\tfragmentShader: mirrorShader.fragmentShader,\n\t\t\tvertexShader: mirrorShader.vertexShader,\n\t\t\tuniforms: UniformsUtils.clone( mirrorShader.uniforms ),\n\t\t\tlights: true,\n\t\t\tside: side,\n\t\t\tfog: fog\n\t\t} );\n\n\t\tmaterial.uniforms[ 'mirrorSampler' ].value = renderTarget.texture;\n\t\tmaterial.uniforms[ 'textureMatrix' ].value = textureMatrix;\n\t\tmaterial.uniforms[ 'alpha' ].value = alpha;\n\t\tmaterial.uniforms[ 'time' ].value = time;\n\t\tmaterial.uniforms[ 'normalSampler' ].value = normalSampler;\n\t\tmaterial.uniforms[ 'sunColor' ].value = sunColor;\n\t\tmaterial.uniforms[ 'waterColor' ].value = waterColor;\n\t\tmaterial.uniforms[ 'sunDirection' ].value = sunDirection;\n\t\tmaterial.uniforms[ 'distortionScale' ].value = distortionScale;\n\n\t\tmaterial.uniforms[ 'eye' ].value = eye;\n\n\t\tscope.material = material;\n\n\t\tscope.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\tmirrorWorldPosition.setFromMatrixPosition( scope.matrixWorld );\n\t\t\tcameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\n\n\t\t\trotationMatrix.extractRotation( scope.matrixWorld );\n\n\t\t\tnormal.set( 0, 0, 1 );\n\t\t\tnormal.applyMatrix4( rotationMatrix );\n\n\t\t\tview.subVectors( mirrorWorldPosition, cameraWorldPosition );\n\n\t\t\t// Avoid rendering when mirror is facing away\n\n\t\t\tif ( view.dot( normal ) > 0 ) return;\n\n\t\t\tview.reflect( normal ).negate();\n\t\t\tview.add( mirrorWorldPosition );\n\n\t\t\trotationMatrix.extractRotation( camera.matrixWorld );\n\n\t\t\tlookAtPosition.set( 0, 0, - 1 );\n\t\t\tlookAtPosition.applyMatrix4( rotationMatrix );\n\t\t\tlookAtPosition.add( cameraWorldPosition );\n\n\t\t\ttarget.subVectors( mirrorWorldPosition, lookAtPosition );\n\t\t\ttarget.reflect( normal ).negate();\n\t\t\ttarget.add( mirrorWorldPosition );\n\n\t\t\tmirrorCamera.position.copy( view );\n\t\t\tmirrorCamera.up.set( 0, 1, 0 );\n\t\t\tmirrorCamera.up.applyMatrix4( rotationMatrix );\n\t\t\tmirrorCamera.up.reflect( normal );\n\t\t\tmirrorCamera.lookAt( target );\n\n\t\t\tmirrorCamera.far = camera.far; // Used in WebGLBackground\n\n\t\t\tmirrorCamera.updateMatrixWorld();\n\t\t\tmirrorCamera.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\t// Update the texture matrix\n\t\t\ttextureMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\t\t\ttextureMatrix.multiply( mirrorCamera.projectionMatrix );\n\t\t\ttextureMatrix.multiply( mirrorCamera.matrixWorldInverse );\n\n\t\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n\t\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\t\t\tmirrorPlane.setFromNormalAndCoplanarPoint( normal, mirrorWorldPosition );\n\t\t\tmirrorPlane.applyMatrix4( mirrorCamera.matrixWorldInverse );\n\n\t\t\tclipPlane.set( mirrorPlane.normal.x, mirrorPlane.normal.y, mirrorPlane.normal.z, mirrorPlane.constant );\n\n\t\t\tconst projectionMatrix = mirrorCamera.projectionMatrix;\n\n\t\t\tq.x = ( Math.sign( clipPlane.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\n\t\t\tq.y = ( Math.sign( clipPlane.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\n\t\t\tq.z = - 1.0;\n\t\t\tq.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\n\n\t\t\t// Calculate the scaled plane vector\n\t\t\tclipPlane.multiplyScalar( 2.0 / clipPlane.dot( q ) );\n\n\t\t\t// Replacing the third row of the projection matrix\n\t\t\tprojectionMatrix.elements[ 2 ] = clipPlane.x;\n\t\t\tprojectionMatrix.elements[ 6 ] = clipPlane.y;\n\t\t\tprojectionMatrix.elements[ 10 ] = clipPlane.z + 1.0 - clipBias;\n\t\t\tprojectionMatrix.elements[ 14 ] = clipPlane.w;\n\n\t\t\teye.setFromMatrixPosition( camera.matrixWorld );\n\n\t\t\t// Render\n\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tconst currentXrEnabled = renderer.xr.enabled;\n\t\t\tconst currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n\n\t\t\tscope.visible = false;\n\n\t\t\trenderer.xr.enabled = false; // Avoid camera modification and recursion\n\t\t\trenderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t\trenderer.state.buffers.depth.setMask( true ); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n\t\t\tif ( renderer.autoClear === false ) renderer.clear();\n\t\t\trenderer.render( scene, mirrorCamera );\n\n\t\t\tscope.visible = true;\n\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t\trenderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\t// Restore viewport\n\n\t\t\tconst viewport = camera.viewport;\n\n\t\t\tif ( viewport !== undefined ) {\n\n\t\t\t\trenderer.state.viewport( viewport );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n}\n\nWater.prototype.isWater = true;\n\nexport { Water };\n","import {\n\tBackSide,\n\tBoxGeometry,\n\tMesh,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector3\n} from 'three';\n\n/**\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * https://www.researchgate.net/publication/220720443_A_Practical_Analytic_Model_for_Daylight\n *\n * First implemented by Simon Wallner\n * http://www.simonwallner.at/projects/atmospheric-scattering\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n*/\n\nclass Sky extends Mesh {\n\n\tconstructor() {\n\n\t\tconst shader = Sky.SkyShader;\n\n\t\tconst material = new ShaderMaterial( {\n\t\t\tname: 'SkyShader',\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\tside: BackSide,\n\t\t\tdepthWrite: false\n\t\t} );\n\n\t\tsuper( new BoxGeometry( 1, 1, 1 ), material );\n\n\t}\n\n}\n\nSky.prototype.isSky = true;\n\nSky.SkyShader = {\n\n\tuniforms: {\n\t\t'turbidity': { value: 2 },\n\t\t'rayleigh': { value: 1 },\n\t\t'mieCoefficient': { value: 0.005 },\n\t\t'mieDirectionalG': { value: 0.8 },\n\t\t'sunPosition': { value: new Vector3() },\n\t\t'up': { value: new Vector3( 0, 1, 0 ) }\n\t},\n\n\tvertexShader: /* glsl */`\n\t\tuniform vec3 sunPosition;\n\t\tuniform float rayleigh;\n\t\tuniform float turbidity;\n\t\tuniform float mieCoefficient;\n\t\tuniform vec3 up;\n\n\t\tvarying vec3 vWorldPosition;\n\t\tvarying vec3 vSunDirection;\n\t\tvarying float vSunfade;\n\t\tvarying vec3 vBetaR;\n\t\tvarying vec3 vBetaM;\n\t\tvarying float vSunE;\n\n\t\t// constants for atmospheric scattering\n\t\tconst float e = 2.71828182845904523536028747135266249775724709369995957;\n\t\tconst float pi = 3.141592653589793238462643383279502884197169;\n\n\t\t// wavelength of used primaries, according to preetham\n\t\tconst vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );\n\t\t// this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\n\t\t// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\n\t\tconst vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );\n\n\t\t// mie stuff\n\t\t// K coefficient for the primaries\n\t\tconst float v = 4.0;\n\t\tconst vec3 K = vec3( 0.686, 0.678, 0.666 );\n\t\t// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\n\t\tconst vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );\n\n\t\t// earth shadow hack\n\t\t// cutoffAngle = pi / 1.95;\n\t\tconst float cutoffAngle = 1.6110731556870734;\n\t\tconst float steepness = 1.5;\n\t\tconst float EE = 1000.0;\n\n\t\tfloat sunIntensity( float zenithAngleCos ) {\n\t\t\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );\n\t\t\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );\n\t\t}\n\n\t\tvec3 totalMie( float T ) {\n\t\t\tfloat c = ( 0.2 * T ) * 10E-18;\n\t\t\treturn 0.434 * c * MieConst;\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\t\tvWorldPosition = worldPosition.xyz;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\tgl_Position.z = gl_Position.w; // set z to camera.far\n\n\t\t\tvSunDirection = normalize( sunPosition );\n\n\t\t\tvSunE = sunIntensity( dot( vSunDirection, up ) );\n\n\t\t\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );\n\n\t\t\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );\n\n\t\t\t// extinction (absorbtion + out scattering)\n\t\t\t// rayleigh coefficients\n\t\t\tvBetaR = totalRayleigh * rayleighCoefficient;\n\n\t\t\t// mie coefficients\n\t\t\tvBetaM = totalMie( turbidity ) * mieCoefficient;\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\t\tvarying vec3 vWorldPosition;\n\t\tvarying vec3 vSunDirection;\n\t\tvarying float vSunfade;\n\t\tvarying vec3 vBetaR;\n\t\tvarying vec3 vBetaM;\n\t\tvarying float vSunE;\n\n\t\tuniform float mieDirectionalG;\n\t\tuniform vec3 up;\n\n\t\tconst vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );\n\n\t\t// constants for atmospheric scattering\n\t\tconst float pi = 3.141592653589793238462643383279502884197169;\n\n\t\tconst float n = 1.0003; // refractive index of air\n\t\tconst float N = 2.545E25; // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)\n\n\t\t// optical length at zenith for molecules\n\t\tconst float rayleighZenithLength = 8.4E3;\n\t\tconst float mieZenithLength = 1.25E3;\n\t\t// 66 arc seconds -> degrees, and the cosine of that\n\t\tconst float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\n\n\t\t// 3.0 / ( 16.0 * pi )\n\t\tconst float THREE_OVER_SIXTEENPI = 0.05968310365946075;\n\t\t// 1.0 / ( 4.0 * pi )\n\t\tconst float ONE_OVER_FOURPI = 0.07957747154594767;\n\n\t\tfloat rayleighPhase( float cosTheta ) {\n\t\t\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );\n\t\t}\n\n\t\tfloat hgPhase( float cosTheta, float g ) {\n\t\t\tfloat g2 = pow( g, 2.0 );\n\t\t\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );\n\t\t\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvec3 direction = normalize( vWorldPosition - cameraPos );\n\n\t\t\t// optical length\n\t\t\t// cutoff angle at 90 to avoid singularity in next formula.\n\t\t\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );\n\t\t\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );\n\t\t\tfloat sR = rayleighZenithLength * inverse;\n\t\t\tfloat sM = mieZenithLength * inverse;\n\n\t\t\t// combined extinction factor\n\t\t\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );\n\n\t\t\t// in scattering\n\t\t\tfloat cosTheta = dot( direction, vSunDirection );\n\n\t\t\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );\n\t\t\tvec3 betaRTheta = vBetaR * rPhase;\n\n\t\t\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );\n\t\t\tvec3 betaMTheta = vBetaM * mPhase;\n\n\t\t\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );\n\t\t\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );\n\n\t\t\t// nightsky\n\t\t\tfloat theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]\n\t\t\tfloat phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]\n\t\t\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );\n\t\t\tvec3 L0 = vec3( 0.1 ) * Fex;\n\n\t\t\t// composition + solar disc\n\t\t\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );\n\t\t\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;\n\n\t\t\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );\n\n\t\t\tvec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );\n\n\t\t\tgl_FragColor = vec4( retColor, 1.0 );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\n\t\t}`\n\n};\n\nexport { Sky };\n","<script>\nimport * as THREE from 'three';\n\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\n\nimport { GUI } from 'three/examples/jsm/libs/dat.gui.module.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { Water } from 'three/examples/jsm/objects/Water.js';\nimport { Sky } from 'three/examples/jsm/objects/Sky.js';\n\nlet stats, gui;\nlet camera, scene, renderer;\nlet controls, water, sun, mesh;\nexport default {\n  components: {},\n  data () {\n    return {};\n  },\n  props: {},\n  computed: {},\n  watch: {},\n  created () {},\n  mounted () {\n    this.$nextTick(() => {\n      this.init();\n    });\n  },\n  methods: {\n    init () {\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(this.$refs.webglRef.clientWidth, this.$refs.webglRef.clientHeight);\n      renderer.setAnimationLoop(this.animate);\n      renderer.toneMapping = THREE.ACESFilmicToneMapping;\n      renderer.toneMappingExposure = 1;\n      this.$refs.webglRef.appendChild(renderer.domElement);\n\n      //\n\n      scene = new THREE.Scene();\n\n      camera = new THREE.PerspectiveCamera(55, this.$refs.webglRef.clientWidth / this.$refs.webglRef.clientHeight, 1, 20000);\n      camera.position.set(30, 30, 100);\n\n      //\n\n      sun = new THREE.Vector3();\n\n      // Water\n\n      const waterGeometry = new THREE.PlaneGeometry(10000, 10000);\n\n      water = new Water(\n        waterGeometry,\n        {\n          textureWidth: 512,\n          textureHeight: 512,\n          waterNormals: new THREE.TextureLoader().load('/static/textures/waternormals.jpg', function (texture) {\n            texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n          }),\n          sunDirection: new THREE.Vector3(),\n          sunColor: 0xffffff,\n          waterColor: 0x001e0f,\n          distortionScale: 3.7,\n          fog: scene.fog !== undefined\n        }\n      );\n\n      water.rotation.x = -Math.PI / 2;\n\n      scene.add(water);\n\n      // Skybox\n\n      const sky = new Sky();\n      sky.scale.setScalar(10000);\n      scene.add(sky);\n\n      const skyUniforms = sky.material.uniforms;\n\n      skyUniforms.turbidity.value = 10;\n      skyUniforms.rayleigh.value = 2;\n      skyUniforms.mieCoefficient.value = 0.005;\n      skyUniforms.mieDirectionalG.value = 0.8;\n\n      const parameters = {\n        elevation: 2,\n        azimuth: 180\n      };\n\n      const pmremGenerator = new THREE.PMREMGenerator(renderer);\n      const sceneEnv = new THREE.Scene();\n\n      let renderTarget;\n\n      function updateSun () {\n        const phi = THREE.MathUtils.degToRad(90 - parameters.elevation);\n        const theta = THREE.MathUtils.degToRad(parameters.azimuth);\n\n        sun.setFromSphericalCoords(1, phi, theta);\n\n        sky.material.uniforms.sunPosition.value.copy(sun);\n        water.material.uniforms.sunDirection.value.copy(sun).normalize();\n\n        if (renderTarget !== undefined) renderTarget.dispose();\n\n        sceneEnv.add(sky);\n        renderTarget = pmremGenerator.fromScene(sceneEnv);\n        scene.add(sky);\n\n        scene.environment = renderTarget.texture;\n      }\n\n      updateSun();\n\n      //\n\n      const geometry = new THREE.BoxGeometry(30, 30, 30);\n      const material = new THREE.MeshStandardMaterial({ roughness: 0 });\n\n      mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n\n      //\n\n      controls = new OrbitControls(camera, renderer.domElement);\n      controls.maxPolarAngle = Math.PI * 0.495;\n      controls.target.set(0, 10, 0);\n      controls.minDistance = 40.0;\n      controls.maxDistance = 200.0;\n      controls.update();\n\n      //\n\n      stats = new Stats();\n      stats.dom.style.position = 'absolute'; // 设置为绝对定位\n      stats.dom.style.top = '10px'; // 调整顶部距离\n      stats.dom.style.left = '10px'; // 调整左侧距离\n      // this.stats.dom.style.zIndex = '100'; // 确保在最上层\n      this.$refs.webglRef.appendChild(stats.dom);\n\n      // GUI\n\n      gui = new GUI();\n\n      const folderSky = gui.addFolder('Sky');\n      folderSky.add(parameters, 'elevation', 0, 90, 0.1).onChange(updateSun);\n      folderSky.add(parameters, 'azimuth', -180, 180, 0.1).onChange(updateSun);\n      folderSky.open();\n\n      const waterUniforms = water.material.uniforms;\n\n      const folderWater = gui.addFolder('Water');\n      folderWater.add(waterUniforms.distortionScale, 'value', 0, 100, 0.1).name('distortionScale').onChange(this.render);\n      folderWater.add(waterUniforms.size, 'value', 0.1, 10, 0.1).name('size');\n      folderWater.open();\n\n      //\n\n      window.addEventListener('resize', this.onWindowResize);\n    },\n    onWindowResize () {\n      camera.aspect = this.$refs.webglRef.clientWidth / this.$refs.webglRef.clientHeight;\n      camera.updateProjectionMatrix();\n\n      renderer.setSize(this.$refs.webglRef.clientWidth, this.$refs.webglRef.clientHeight);\n    },\n    animate () {\n      this.render();\n      stats.update();\n    },\n    render () {\n      const time = performance.now() * 0.001;\n\n      mesh.position.y = Math.sin(time) * 20 + 5;\n      mesh.rotation.x = time * 0.5;\n      mesh.rotation.z = time * 0.51;\n\n      water.material.uniforms.time.value += 1.0 / 60.0;\n\n      renderer.render(scene, camera);\n    },\n\n    destroyGUI () {\n      if (gui) {\n        gui.destroy(); // 销毁 dat.GUI 实例\n        gui = null;\n      }\n    }\n  },\n  beforeDestroy () {\n    this.destroyGUI();\n  }\n};\n</script>\n\n<template>\n<div class=\"container\" id=\"container\" ref=\"webglRef\"></div>\n</template>\n\n<style scoped lang=\"scss\">\n.container {\n  height: 100%;\n  width: 100%;\n  position: relative;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=9ca1d56e&scoped=true\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\nimport style0 from \"./index.vue?vue&type=style&index=0&id=9ca1d56e&prod&scoped=true&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"9ca1d56e\",\n  null\n  \n)\n\nexport default component.exports","var Stats = function () {\n\n\tvar mode = 0;\n\n\tvar container = document.createElement( 'div' );\n\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n\tcontainer.addEventListener( 'click', function ( event ) {\n\n\t\tevent.preventDefault();\n\t\tshowPanel( ++ mode % container.children.length );\n\n\t}, false );\n\n\t//\n\n\tfunction addPanel( panel ) {\n\n\t\tcontainer.appendChild( panel.dom );\n\t\treturn panel;\n\n\t}\n\n\tfunction showPanel( id ) {\n\n\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\n\n\t\t\tcontainer.children[ i ].style.display = i === id ? 'block' : 'none';\n\n\t\t}\n\n\t\tmode = id;\n\n\t}\n\n\t//\n\n\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\n\n\tvar fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\n\tvar msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) );\n\n\tif ( self.performance && self.performance.memory ) {\n\n\t\tvar memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) );\n\n\t}\n\n\tshowPanel( 0 );\n\n\treturn {\n\n\t\tREVISION: 16,\n\n\t\tdom: container,\n\n\t\taddPanel: addPanel,\n\t\tshowPanel: showPanel,\n\n\t\tbegin: function () {\n\n\t\t\tbeginTime = ( performance || Date ).now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tframes ++;\n\n\t\t\tvar time = ( performance || Date ).now();\n\n\t\t\tmsPanel.update( time - beginTime, 200 );\n\n\t\t\tif ( time >= prevTime + 1000 ) {\n\n\t\t\t\tfpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif ( memPanel ) {\n\n\t\t\t\t\tvar memory = performance.memory;\n\t\t\t\t\tmemPanel.update( memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tbeginTime = this.end();\n\n\t\t},\n\n\t\t// Backwards Compatibility\n\n\t\tdomElement: container,\n\t\tsetMode: showPanel\n\n\t};\n\n};\n\nStats.Panel = function ( name, fg, bg ) {\n\n\tvar min = Infinity, max = 0, round = Math.round;\n\tvar PR = round( window.devicePixelRatio || 1 );\n\n\tvar WIDTH = 80 * PR, HEIGHT = 48 * PR,\n\t\tTEXT_X = 3 * PR, TEXT_Y = 2 * PR,\n\t\tGRAPH_X = 3 * PR, GRAPH_Y = 15 * PR,\n\t\tGRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n\n\tvar canvas = document.createElement( 'canvas' );\n\tcanvas.width = WIDTH;\n\tcanvas.height = HEIGHT;\n\tcanvas.style.cssText = 'width:80px;height:48px';\n\n\tvar context = canvas.getContext( '2d' );\n\tcontext.font = 'bold ' + ( 9 * PR ) + 'px Helvetica,Arial,sans-serif';\n\tcontext.textBaseline = 'top';\n\n\tcontext.fillStyle = bg;\n\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\n\n\tcontext.fillStyle = fg;\n\tcontext.fillText( name, TEXT_X, TEXT_Y );\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\tcontext.fillStyle = bg;\n\tcontext.globalAlpha = 0.9;\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\treturn {\n\n\t\tdom: canvas,\n\n\t\tupdate: function ( value, maxValue ) {\n\n\t\t\tmin = Math.min( min, value );\n\t\t\tmax = Math.max( max, value );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 1;\n\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\n\t\t\tcontext.fillStyle = fg;\n\t\t\tcontext.fillText( round( value ) + ' ' + name + ' (' + round( min ) + '-' + round( max ) + ')', TEXT_X, TEXT_Y );\n\n\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 0.9;\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\n\n\t\t}\n\n\t};\n\n};\n\nexport default Stats;\n"],"names":["render","_vm","this","_c","_self","ref","staticClass","attrs","staticRenderFns","Water","constructor","geometry","options","super","scope","textureWidth","undefined","textureHeight","clipBias","alpha","time","normalSampler","waterNormals","sunDirection","sunColor","waterColor","eye","distortionScale","side","fog","mirrorPlane","normal","mirrorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","mirrorCamera","parameters","minFilter","magFilter","format","renderTarget","isPowerOfTwo","texture","generateMipmaps","mirrorShader","uniforms","merge","value","vertexShader","fragmentShader","material","clone","lights","onBeforeRender","renderer","scene","camera","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","visible","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","viewport","prototype","isWater","Sky","shader","SkyShader","name","depthWrite","stats","gui","controls","water","sun","mesh","isSky","components","data","props","computed","watch","created","mounted","$nextTick","init","methods","THREE","setPixelRatio","window","devicePixelRatio","setSize","$refs","webglRef","clientWidth","clientHeight","setAnimationLoop","animate","toneMapping","toneMappingExposure","appendChild","domElement","waterGeometry","load","wrapS","wrapT","rotation","PI","sky","scale","setScalar","skyUniforms","turbidity","rayleigh","mieCoefficient","mieDirectionalG","elevation","azimuth","pmremGenerator","sceneEnv","updateSun","phi","degToRad","theta","setFromSphericalCoords","sunPosition","normalize","dispose","fromScene","environment","roughness","OrbitControls","maxPolarAngle","minDistance","maxDistance","update","Stats","dom","style","top","left","GUI","folderSky","addFolder","onChange","open","waterUniforms","folderWater","size","addEventListener","onWindowResize","aspect","updateProjectionMatrix","performance","now","sin","destroyGUI","destroy","beforeDestroy","component","mode","container","document","createElement","addPanel","panel","showPanel","id","i","children","length","display","cssText","event","preventDefault","beginTime","Date","prevTime","frames","fpsPanel","Panel","msPanel","self","memory","memPanel","REVISION","begin","end","usedJSHeapSize","jsHeapSizeLimit","setMode","fg","bg","min","Infinity","max","round","PR","WIDTH","HEIGHT","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","canvas","width","height","context","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","maxValue","drawImage"],"sourceRoot":""}